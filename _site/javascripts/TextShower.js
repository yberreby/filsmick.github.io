// Generated by CoffeeScript 1.6.3
/*
TextShower v1.0.3
© 2013 Yohaï Berreby (@filsmick) <yohaiberreby@gmail.com>
See http://github.com/filsmick/TextShower/ for license and instructions
*/


(function() {
  (function($) {
    return $(function() {
      var CSSTransitions, TSBox, box, boxes, closedDynStr, commonStyle, div, heightDelay, heightTiming, i, marginDelay, marginTiming, modifyTitle, openedDynStr, prefixes, prefixesLength, settings, style, transition, transitions, _i, _j, _len, _len1, _results;
      heightDelay = '0.5s';
      marginDelay = '0.55s';
      heightTiming = 'easeIn';
      marginTiming = 'ease';
      modifyTitle = true;
      CSSTransitions = true;
      closedDynStr = '+ ';
      openedDynStr = '- ';
      if (CSSTransitions) {
        transitions = false;
        prefixes = ['Webkit', 'Moz', 'O', 'ms'];
        div = document.createElement('div');
        if (div.style.transition) {
          transitions = true;
        } else {
          prefixesLength = prefixes.length;
          for (_i = 0, _len = prefixesLength.length; _i < _len; _i++) {
            i = prefixesLength[_i];
            if (div.style[prefixes[i] + 'Transition'] !== void 0) {
              transitions = true;
              break;
            }
          }
        }
      } else {
        transitions = false;
      }
      if ($("meta[data-TextShower]").length !== 0) {
        settings = $("meta[data-TextShower]").attr("data-TextShower").split(" ");
        if (settings[0] !== "default") {
          if (heightDelay == null) {
            heightDelay = settings[0];
          }
        }
        if (settings[1] !== "default") {
          if (marginDelay == null) {
            marginDelay = settings[1];
          }
        }
        if (settings[2] !== "default") {
          if (heightTiming == null) {
            heightTiming = settings[2];
          }
        }
        if (settings[3] !== "default") {
          if (modifyTitle == null) {
            modifyTitle = settings[3] === 'true';
          }
        }
        if (settings[4] !== "default") {
          if (CSSTransitions == null) {
            CSSTransitions = settings[4] === 'true';
          }
        }
      }
      style = document.createElement('style');
      commonStyle = ".TextShower-title {\n	-moz-user-select: none;\n	-webkit-user-select: none;\n	-ms-user-select: none;\n	user-select: none;\n	cursor: pointer;\n}\n.TextShower-text {\n	overflow: hidden;\n}";
      style.type = 'text/css';
      if (transitions) {
        transition = "height " + heightDelay + " " + heightTiming + ", 			margin " + marginDelay + " " + marginTiming + ", 			padding-top " + marginDelay + " " + marginTiming + ", 			padding-bottom " + heightDelay + " " + heightTiming;
        style.innerHTML = commonStyle + (".TextShower-text {\n	-Webkit-transition: " + transition + ";\n	-Moz-transition: " + transition + ";\n	-O-transition: " + transition + ";\n	-ms-transition: " + transition + ";\n	transition: " + transition + ";\n}\n.notransition { \n	-Webkit-transition: none !important;\n	-Moz-transition: none !important;\n	-O-transition: none !important;\n	-ms-transition: none !important;\n	transition: none !important;\n}");
      } else {
        style.innerHTML = commonStyle;
      }
      document.querySelector('head').appendChild(style);
      TSBox = (function() {
        function TSBox(box) {
          var floatHeightDelay, floatMarginDelay,
            _this = this;
          this.titleElement = $(box).find($('.TextShower-title'));
          this.textElement = $(box).find($('.TextShower-text'));
          this.deployed = false;
          if (modifyTitle) {
            this.titleElement.text(closedDynStr + this.titleElement.text());
          }
          this.textElement.addClass('notransition');
          this.prevHeight = this.textElement.css('height');
          this.prevMargin = this.textElement.css('margin');
          this.prevPaddingTop = this.textElement.css('paddingTop');
          this.prevPaddingBottom = this.textElement.css('paddingBottom');
          this.textElement.css('height', '0px').css('margin', '0 0 0 0').css('padding-top', '0').css('padding-bottom', '0');
          this.titleElement.css('margin-bottom', this.titleElement.css('margin-bottom').substring(0, -2) / 2);
          setTimeout((function() {
            return _this.textElement.removeClass('notransition');
          }), 0);
          floatHeightDelay = parseFloat(heightDelay.match(/\d+\.?\d*/g));
          floatMarginDelay = parseFloat(marginDelay.match(/\d+\.?\d*/g));
          this.longestDuration = Math.max.apply(Math, [floatHeightDelay, floatMarginDelay]) * 1000;
          if ($(box).hasClass('TextShower-open')) {
            this.changeState();
          }
          $(this.titleElement).click(function() {
            return _this.changeState();
          });
          $(window).bind("hashchange", function() {
            return _this.anchorNav();
          });
          this.anchorNav();
        }

        TSBox.prototype.openBox = function() {
          var actualHeight, transEnd,
            _this = this;
          this.deployed = true;
          if (modifyTitle) {
            this.titleElement.text(this.titleElement.text().replace(closedDynStr, openedDynStr));
          }
          actualHeight = this.textElement.height() + 'px';
          this.textElement.addClass('notransition');
          this.textElement.css('height', 'auto');
          this.prevHeight = this.textElement.height() + 'px';
          this.textElement.css('height', actualHeight);
          this.textElement.height();
          this.textElement.removeClass('notransition');
          transEnd = function() {
            _this.textElement.addClass('notransition').css('height', 'auto');
            return _this.prevHeight = _this.textElement.height() + 'px';
          };
          if (!transitions) {
            return this.textElement.animate({
              height: this.prevHeight
            }, {
              duration: heightDelay,
              easing: 'swing',
              queue: false,
              complete: transEnd
            }).animate({
              margin: this.prevMargin
            }, {
              duration: marginDelay,
              easing: 'swing',
              queue: false
            }).animate({
              paddingTop: this.prevPaddingTop
            }, {
              duration: marginDelay,
              easing: 'swing',
              queue: false
            }).animate({
              paddingBottom: this.prevPaddingBottom
            }, {
              duration: marginDelay,
              easing: 'swing',
              queue: false
            });
          } else {
            this.textElement.css('height', this.prevHeight).css('margin', this.prevMargin).css('padding-top', this.prevPaddingTop).css('padding-bottom', this.prevPaddingBottom);
            return this.timer = setTimeout(transEnd, Math.max.apply(Math, this.durationArray) * 1000);
          }
        };

        TSBox.prototype.closeBox = function() {
          var _this = this;
          this.deployed = false;
          if (modifyTitle) {
            this.titleElement.text(this.titleElement.text().replace(openedDynStr, closedDynStr));
          }
          if (this.timer != null) {
            clearTimeout(this.timer);
          }
          this.prevHeight = this.textElement.height();
          this.textElement.css('height', this.textElement.height() + "px");
          return setTimeout((function() {
            _this.textElement.removeClass('notransition');
            if (!transitions) {
              return _this.textElement.animate({
                height: '0px'
              }, {
                duration: heightDelay,
                easing: 'swing',
                queue: false
              }).animate({
                margin: '0 0 0 0'
              }, {
                duration: marginDelay,
                easing: 'swing',
                queue: false
              }).animate({
                paddingTop: '0'
              }, {
                duration: marginDelay,
                easing: 'swing',
                queue: false
              }).animate({
                paddingBottom: '0'
              }, {
                duration: marginDelay,
                easing: 'swing',
                queue: false
              });
            } else {
              return _this.textElement.css('height', '0px').css('margin', '0 0 0 0').css('padding-top', '0').css('padding-bottom', '0');
            }
          }), 0);
        };

        TSBox.prototype.changeState = function(deployed) {
          if (deployed == null) {
            deployed = this.deployed;
          }
          if (deployed) {
            this.closeBox();
          }
          if (!deployed) {
            return this.openBox();
          }
        };

        TSBox.prototype.anchorNav = function() {
          var hash;
          hash = window.location.hash.substring(1);
          if (hash === this.titleElement.attr('id') && hash !== '') {
            this.changeState(false);
            return setTimeout(this.titleElement[0].scrollIntoView(true), this.longestTransition);
          }
        };

        return TSBox;

      })();
      boxes = $('.TextShower-box');
      _results = [];
      for (_j = 0, _len1 = boxes.length; _j < _len1; _j++) {
        box = boxes[_j];
        _results.push(new TSBox(box));
      }
      return _results;
    });
  })(window.jQuery);

}).call(this);
